'''
1. in this project we downloded the world development indicator 
2. in this dataframe(country name, country code, indicator name, year, value)
3. data reading and understanding
4. in next step will explore data by visualization by making dataframe of "IndicatorName = co2 emission metric ton per capita "intersection" country code = USA"
5. in next step will plot bar and line chart between Year and value 
6. next time will analyze value of co2 emission by plotting histogram 
7. next time will analyze frquency of countries emits carbon emission in the year 2011 by histogram and will learn how to annotate any country
8. now, will analyze GDP of USA and years by plotting line plot
9. now, will analyse relationship between carbon emission and GDP growth. for that we alredy have two dataframe "co2 emission vs USA" and "gdp per capita vs USA"
before ploting we need to chek the number of years in bothe dataframe as per we need to trim it.
to understand the relationship between these two indicator code we have to plot scatter plot.
'''

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import  random
import matplotlib.cbook
import warnings

warnings.filterwarnings('ignore')
df = pd.read_csv(r"H:\DataScience\Day-28\26 JUNE 2022\Projects\data\Indicators\indicators")
print(df.shape)
print(df.head(10))
print(df.columns)
print(df.count())
print(df['IndicatorName'])

'''From the above dataset, it looks like it has different indicators for different
countries with the year and value of the indicator.
How many UNIQUE country names are there ?
'''
how_many_country = df['CountryName'].unique().tolist()
print(len(how_many_country))

'''Are there same number of country codes ?
How many unique country codes are there?
It should be the same as number of unique countries.
'''
how_many_country_codes = df['CountryCode'].unique().tolist()
print(len(how_many_country_codes))

'''
Are there many indicators or few ?
How many unique indicators are there?
'''
how_many_indicators = df['IndicatorCode'].unique().tolist()
print(len(how_many_indicators))

'''
How many years of data do we have ?
'''
how_many_years = df['Year'].unique().tolist()  #
print(len(how_many_years))
print(min(how_many_years), max(how_many_years))

'''
Data Visualization
Let us pick a country and an indicator to explore CO2 Emissions per capita and the USA.
To select CO2 emissions for the United States, We will take the intersection of two masks,
one with all the rows that contains the string "C02 emissions" and the 
other which contains all the rows containing the string, "USA".
'''

hist_indicator = "CO2 emissions \(metric"
hist_country = 'USA'
mask1 = df['IndicatorName'].str.contains(hist_indicator)
mask2 = df['CountryCode'].str.contains(hist_country)
stage = df[mask1 & mask2]
print(stage.shape)
print(stage.head())
# print(stage.iloc[0:5])
print(stage['IndicatorName'].iloc[0])
print('Maximum co2 generated by USA',max(stage['Value']))


'''
Let us see how emissions have changed over time using MatplotLib
'''
x = stage['Year'].values
y = stage['Value'].values
plt.bar(x, y)
plt.show()

'''
It is seen that emissions per capita have dropped a bit over time,
but let us make this graph a bit more appealing before we continue to explore it.
Let us create a line plot.
'''
plt.plot(x, y)
plt.title('CO2 Emissions in USA')
plt.xlabel('Year')
plt.ylabel(stage['IndicatorCode'].iloc[0])
plt.axis([1959, 2011, 0, 25])
plt.show()

'''
The histogram is a popular graphing tool. It is used to summarize discrete or continuous data 
that are measured on an interval scale. It is often used to illustrate the major features 
of the distribution of the data in a convenient form. It is also useful when dealing with 
large data sets (greater than 100 observations). It can help detect any unusual 
observations (outliers) or any gaps in the data.
'''

'''
Using Histograms to explore the distribution of values
We could also visualize this data as a histogram to better explore
the ranges of values in CO2 production per year.

lower = stage['Value'].mean() - stage['Value'].std()
upper = stage['Value'].mean() + stage['Value'].std()
hist_data = []
for x in stage['Value']:
    if x > lower and x < upper:
        hist_data.append(x)
print('**\n',hist_data)
plt.hist(hist_data, 20)
plt.show()
'''

hist_data = stage['Value'].values
print(hist_data)
print(len(hist_data))
plt.hist(hist_data, 10, density=False, color = 'green', rwidth = 0.96) # 10 is number of bins
plt.xlabel(stage['IndicatorName'].iloc[0])
plt.ylabel('# of Years')
plt.title('Histogram Example')
plt.grid(True)
plt.show()

'''
USA has many years where it produced CO2 between 19-20 metric tons per capita with outliers on either side.
But how do the USA's numbers relate to those of other countries?
select CO2 emissions for all countries in 2011
'''
hist_indicator = 'CO2 emissions \(metric'
hist_year = 2011
mask1 = df['IndicatorName'].str.contains(hist_indicator)
mask2 = df['Year'].isin([hist_year])
co2_2011 = df[mask1 & mask2]
print("co2 in 2011 by all countries\n", co2_2011.head())
print("length of the co2 in 2011 by all countries is\n", len(co2_2011))

'''
Let us plot a histogram of the emissions per capita by country
subplots returns a tuple with the figure, axis attributes.
'''
fig, ax = plt.subplots()
ax.annotate('USA', xy = (18,5), xytext = (18,30), xycoords = 'data', textcoords='data', arrowprops=dict(arrowstyle="->"))
plt.hist(co2_2011['Value'], 10, rwidth=0.95, color = 'yellow')
plt.xlabel(stage['IndicatorName'].iloc[0])
plt.ylabel('# of Countries')
plt.title('Histogram of CO2 Emissions Per Capita')
plt.grid()
plt.show()

'''
3. Matplotlib: Basic Plotting Part 2
Relationship between GPD and CO2 Emissions in USA
Select GDP Per capita emissions for the United States
'''
hist_indicator = 'GDP per capita \(constant 2005'
hist_country = 'USA'
mask1 = df['IndicatorName'].str.contains(hist_indicator)
mask2 = df['CountryCode'].str.contains(hist_country)
gdp_stage = df[mask1 & mask2]
plt.plot(gdp_stage['Year'].values, gdp_stage['Value'].values)
plt.xlabel('Year')
plt.ylabel(gdp_stage['IndicatorName'].iloc[0])
plt.title('GDP Per Capita USA')
plt.show()

'''
Although we have seen a decline in the CO2 emissions per capita,
it does not seem to translate to a decline in GDP per capita
ScatterPlot for comparing GDP against CO2 emissions (per capita)
First, we will need to make sure we are looking at the same time frames.
'''
print('gdp minimum year', gdp_stage['Year'].min(), gdp_stage['Year'].max())
print('stage', stage['Year'].min(), stage['Year'].max())

'''
We have 3 extra years of GDP data, so let's trim those off so the scatterplot
has equal length arrays to compare (this is actually required by scatterplot)
'''
gdp_stage_trunc = gdp_stage[gdp_stage['Year']<2012]
print(len(gdp_stage_trunc))
print(len(stage))

fig, ax = plt.subplots()
ax.grid()
ax.set_title('CO2 Emissions vs. GDP (per capita)',fontsize=10)
ax.set_xlabel(gdp_stage_trunc['IndicatorName'].iloc[0])
ax.set_ylabel(stage['IndicatorName'].iloc[0])
x = gdp_stage_trunc['Value'].values
y = stage['Value'].values
ax.scatter(x,y)
plt.show()

'''
This does not look like a strong relationship. We can test this by looking at correlation.
'''
print('corelation value', np.corrcoef(gdp_stage_trunc['Value'], stage['Value']))

'''
correlation is weak
'''
